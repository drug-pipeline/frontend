name: Deploy Frontend to GCE

on:
  push:
    branches: [ "master" ]   # 기본 브랜치가 main이면 main으로 바꾸세요
  workflow_dispatch:

env:
  PROJECT_ID: nimble-poet-474703-f7
  REGION: asia-northeast3
  REPO_NAME: frontend
  IMAGE_NAME: frontend
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev -q

      - name: Compose IMAGE_URI
        run: echo "IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Build & Push image (latest + sha)
        run: |
          set -euo pipefail
          SHA_TAG=${GITHUB_SHA::7}
          echo "Building image: $IMAGE_URI (tags: latest, $SHA_TAG)"
          docker build -t "$IMAGE_URI:latest" -t "$IMAGE_URI:$SHA_TAG" .
          echo "Pushing image: latest"
          docker push "$IMAGE_URI:latest"
          echo "Pushing image: $SHA_TAG"
          docker push "$IMAGE_URI:$SHA_TAG"
          echo "Image push complete."

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Write SSH key (preserve newlines)
        run: |
          cat > key.pem << 'EOF'
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          chmod 600 key.pem

      - name: Show resolved SSH vars + key fingerprint
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
        run: |
          echo "Resolved SSH_USER=${SSH_USER:-ubuntu}"
          echo "Resolved SSH_HOST=${SSH_HOST}"
          echo "Fingerprint of key.pem that GitHub will use:"
          ssh-keygen -y -f key.pem | ssh-keygen -lf -

      - name: Print runner's public key (paste this into VM)
        run: |
          echo "=== PUBLIC KEY (paste this into authorized_keys) ==="
          ssh-keygen -y -f key.pem
          echo "=== FINGERPRINT ==="
          ssh-keygen -y -f key.pem | ssh-keygen -lf -


      - name: Test SSH connectivity (-vvv)
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i key.pem ${SSH_USER:-ubuntu}@${SSH_HOST} 'whoami && id && uname -a && echo OK'

      - name: Deploy on VM (pull frontend only)
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${SSH_USER:-ubuntu}@${SSH_HOST} 'bash -se' <<'EOSH'
          set -euo pipefail
          cd ~/apps/stack

          # Ensure compose file & .env exist (first time only)
          if [ ! -f docker-compose.yml ]; then echo "ERROR: ~/apps/stack/docker-compose.yml missing"; exit 1; fi
          if [ ! -f .env ]; then echo "ERROR: ~/apps/stack/.env missing"; exit 1; fi

          echo "--- Pulling images (frontend + proxy) ---"
          docker compose pull reverse-proxy frontend

          echo "--- Restarting services ---"
          docker compose up -d reverse-proxy frontend

          echo "--- Check ---"
          docker compose ps
          curl -sSI http://127.0.0.1 | sed -n '1,20p' || true
          EOSH

