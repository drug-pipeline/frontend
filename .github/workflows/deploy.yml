name: Deploy Frontend to GCE

on:
  push:
    branches: [ "master" ]   # 기본 브랜치가 main이면 여기 main으로 바꾸세요
  workflow_dispatch:

env:
  PROJECT_ID: nimble-poet-474703-f7
  REGION: asia-northeast3
  REPO_NAME: frontend
  IMAGE_NAME: frontend
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev -q

      - name: Compose IMAGE_URI
        run: echo "IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Build & Push image (latest + sha)
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          docker build -t "$IMAGE_URI:latest" -t "$IMAGE_URI:$SHA_TAG" .
          docker push "$IMAGE_URI:latest"
          docker push "$IMAGE_URI:$SHA_TAG"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Write SSH key (preserve newlines)
        run: |
          cat > key.pem << 'EOF'
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          chmod 600 key.pem

      - name: Test SSH (debug)
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${SSH_USER:-ubuntu}@${SSH_HOST} 'echo OK'

      - name: Deploy on VM
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${SSH_USER:-ubuntu}@${SSH_HOST} 'bash -se' <<'EOSH'
          set -e
          mkdir -p ~/apps/frontend
          cd ~/apps/frontend

          # docker-compose.yml 없으면 생성(있으면 유지)
          if [ ! -f docker-compose.yml ]; then
            printf '%s\n' \
              'services:' \
              '  web:' \
              '    image: asia-northeast3-docker.pkg.dev/nimble-poet-474703-f7/frontend/frontend:latest' \
              '    restart: always' \
              '    ports:' \
              '      - "80:3000"' \
              > docker-compose.yml
            # 환경변수 필요하면 아래처럼 이어 붙이세요:
            # printf '%s\n' \
            #   '    environment:' \
            #   '      - NEXT_PUBLIC_BACKEND_URL=https://<your-backend>' \
            #   >> docker-compose.yml
          fi

          docker compose pull
          docker compose up -d
          docker image prune -f
          docker compose ps
          EOSH
